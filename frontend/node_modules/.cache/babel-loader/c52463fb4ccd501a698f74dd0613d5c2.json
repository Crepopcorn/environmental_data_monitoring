{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nooxy\\\\Downloads\\\\proj_final\\\\proj_1\\\\frontend\\\\src\\\\components\\\\DataInputForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(process.env.REACT_APP_BACKEND_URL);\nfunction DataInputForm() {\n  _s();\n  const [temperature, setTemperature] = useState('');\n  const [humidity, setHumidity] = useState('');\n  const [timestamp, setTimestamp] = useState('');\n  const [message, setMessage] = useState('');\n  const [existingTimestamps, setExistingTimestamps] = useState([]);\n\n  // Fetch existing data to store timestamps\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_BACKEND_URL}/api/data`).then(response => response.json()).then(data => {\n      const timestamps = data.map(entry => {\n        // Only keep the timestamp accurate to minutes\n        const date = new Date(entry.timestamp);\n        date.setSeconds(0, 0);\n        return date.toISOString();\n      });\n      setExistingTimestamps(timestamps);\n    }).catch(error => {\n      console.error('Failed to fetch initial data', error);\n    });\n  }, []);\n\n  // Set the default timestamp to Singapore time when the component loads\n  useEffect(() => {\n    const singaporeTime = new Date().toLocaleString('en-SG', {\n      timeZone: 'Asia/Singapore',\n      hour12: false\n    });\n    const [date, time] = singaporeTime.split(', ');\n    const formattedTime = time.slice(0, 5); // Get hours and minutes only\n    const formattedTimestamp = `${date.split('/').reverse().join('-')}T${formattedTime}`;\n    setTimestamp(formattedTimestamp);\n  }, []);\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!temperature || !humidity) {\n      setMessage('Please enter both temperature and humidity.');\n      return;\n    }\n\n    // Validation: Check if temperature and humidity are within the allowed range\n    if (temperature < -50 || temperature > 50) {\n      alert('Temperature out of range! Please input a value between -50 and 50.');\n      return;\n    }\n    if (humidity < 0 || humidity > 100) {\n      alert('Humidity out of range! Please input a value between 0 and 100.');\n      return;\n    }\n\n    // Check for duplicate timestamp (accurate to minutes)\n    const formattedTimestamp = timestamp || new Date().toISOString();\n    const dateToCheck = new Date(formattedTimestamp);\n    dateToCheck.setSeconds(0, 0); // Set seconds and milliseconds to 0\n\n    if (existingTimestamps.includes(dateToCheck.toISOString())) {\n      alert('This timestamp (accurate to the minute) already exists. Please select a different timestamp.');\n      return;\n    }\n\n    // Create a data object\n    const newData = {\n      temperature: parseFloat(temperature),\n      humidity: parseFloat(humidity),\n      timestamp: dateToCheck.toISOString()\n    };\n\n    // Emit the new data through the socket\n    socket.emit('new_data', newData);\n\n    // Update existing timestamps\n    setExistingTimestamps(prevTimestamps => [...prevTimestamps, dateToCheck.toISOString()]);\n\n    // Clear form inputs\n    setTemperature('');\n    setHumidity('');\n\n    // Reset to current Singapore time (accurate to minutes)\n    const singaporeTime = new Date().toLocaleString('en-SG', {\n      timeZone: 'Asia/Singapore',\n      hour12: false\n    });\n    const [date, time] = singaporeTime.split(', ');\n    const newFormattedTime = time.slice(0, 5); // Get hours and minutes only\n    const newFormattedTimestamp = `${date.split('/').reverse().join('-')}T${newFormattedTime}`;\n    setTimestamp(newFormattedTimestamp);\n    setMessage('Data submitted successfully!');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Temperature:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: temperature,\n          onChange: e => setTemperature(e.target.value),\n          className: \"input-box\",\n          step: \"0.1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Humidity:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: humidity,\n          onChange: e => setHumidity(e.target.value),\n          className: \"input-box\",\n          step: \"0.1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Timestamp (optional):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"datetime-local\",\n          value: timestamp,\n          onChange: e => setTimestamp(e.target.value),\n          className: \"input-box\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n}\n_s(DataInputForm, \"KBVHWa0D4s3n7vYZmsiL1kzAS3E=\");\n_c = DataInputForm;\nexport default DataInputForm;\nvar _c;\n$RefreshReg$(_c, \"DataInputForm\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","socket","process","env","REACT_APP_BACKEND_URL","DataInputForm","_s","temperature","setTemperature","humidity","setHumidity","timestamp","setTimestamp","message","setMessage","existingTimestamps","setExistingTimestamps","fetch","then","response","json","data","timestamps","map","entry","date","Date","setSeconds","toISOString","catch","error","console","singaporeTime","toLocaleString","timeZone","hour12","time","split","formattedTime","slice","formattedTimestamp","reverse","join","handleSubmit","e","preventDefault","alert","dateToCheck","includes","newData","parseFloat","emit","prevTimestamps","newFormattedTime","newFormattedTimestamp","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","target","className","step","_c","$RefreshReg$"],"sources":["C:/Users/nooxy/Downloads/proj_final/proj_1/frontend/src/components/DataInputForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nconst socket = io(process.env.REACT_APP_BACKEND_URL);\r\n\r\nfunction DataInputForm() {\r\n    const [temperature, setTemperature] = useState('');\r\n    const [humidity, setHumidity] = useState('');\r\n    const [timestamp, setTimestamp] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [existingTimestamps, setExistingTimestamps] = useState([]);\r\n\r\n    // Fetch existing data to store timestamps\r\n    useEffect(() => {\r\n        fetch(`${process.env.REACT_APP_BACKEND_URL}/api/data`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const timestamps = data.map(entry => {\r\n                    // Only keep the timestamp accurate to minutes\r\n                    const date = new Date(entry.timestamp);\r\n                    date.setSeconds(0, 0);\r\n                    return date.toISOString();\r\n                });\r\n                setExistingTimestamps(timestamps);\r\n            })\r\n            .catch(error => {\r\n                console.error('Failed to fetch initial data', error);\r\n            });\r\n    }, []);\r\n\r\n    // Set the default timestamp to Singapore time when the component loads\r\n    useEffect(() => {\r\n        const singaporeTime = new Date().toLocaleString('en-SG', {\r\n            timeZone: 'Asia/Singapore',\r\n            hour12: false,\r\n        });\r\n        const [date, time] = singaporeTime.split(', ');\r\n        const formattedTime = time.slice(0, 5); // Get hours and minutes only\r\n        const formattedTimestamp = `${date.split('/').reverse().join('-')}T${formattedTime}`;\r\n        setTimestamp(formattedTimestamp);\r\n    }, []);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (!temperature || !humidity) {\r\n            setMessage('Please enter both temperature and humidity.');\r\n            return;\r\n        }\r\n\r\n        // Validation: Check if temperature and humidity are within the allowed range\r\n        if (temperature < -50 || temperature > 50) {\r\n            alert('Temperature out of range! Please input a value between -50 and 50.');\r\n            return;\r\n        }\r\n\r\n        if (humidity < 0 || humidity > 100) {\r\n            alert('Humidity out of range! Please input a value between 0 and 100.');\r\n            return;\r\n        }\r\n\r\n        // Check for duplicate timestamp (accurate to minutes)\r\n        const formattedTimestamp = timestamp || new Date().toISOString();\r\n        const dateToCheck = new Date(formattedTimestamp);\r\n        dateToCheck.setSeconds(0, 0); // Set seconds and milliseconds to 0\r\n\r\n        if (existingTimestamps.includes(dateToCheck.toISOString())) {\r\n            alert('This timestamp (accurate to the minute) already exists. Please select a different timestamp.');\r\n            return;\r\n        }\r\n\r\n        // Create a data object\r\n        const newData = {\r\n            temperature: parseFloat(temperature),\r\n            humidity: parseFloat(humidity),\r\n            timestamp: dateToCheck.toISOString(),\r\n        };\r\n\r\n        // Emit the new data through the socket\r\n        socket.emit('new_data', newData);\r\n\r\n        // Update existing timestamps\r\n        setExistingTimestamps(prevTimestamps => [...prevTimestamps, dateToCheck.toISOString()]);\r\n\r\n        // Clear form inputs\r\n        setTemperature('');\r\n        setHumidity('');\r\n        \r\n        // Reset to current Singapore time (accurate to minutes)\r\n        const singaporeTime = new Date().toLocaleString('en-SG', {\r\n            timeZone: 'Asia/Singapore',\r\n            hour12: false,\r\n        });\r\n        const [date, time] = singaporeTime.split(', ');\r\n        const newFormattedTime = time.slice(0, 5); // Get hours and minutes only\r\n        const newFormattedTimestamp = `${date.split('/').reverse().join('-')}T${newFormattedTime}`;\r\n        setTimestamp(newFormattedTimestamp);\r\n\r\n        setMessage('Data submitted successfully!');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <label>Temperature:</label>\r\n                    <input\r\n                        type=\"number\"\r\n                        value={temperature}\r\n                        onChange={(e) => setTemperature(e.target.value)}\r\n                        className=\"input-box\"\r\n                        step=\"0.1\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Humidity:</label>\r\n                    <input\r\n                        type=\"number\"\r\n                        value={humidity}\r\n                        onChange={(e) => setHumidity(e.target.value)}\r\n                        className=\"input-box\"\r\n                        step=\"0.1\"\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Timestamp (optional):</label>\r\n                    <input\r\n                        type=\"datetime-local\"\r\n                        value={timestamp}\r\n                        onChange={(e) => setTimestamp(e.target.value)}\r\n                        className=\"input-box\"\r\n                    />\r\n                </div>\r\n                <button type=\"submit\">Submit</button>\r\n            </form>\r\n            {message && <p>{message}</p>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DataInputForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}